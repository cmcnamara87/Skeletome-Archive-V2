<?php
// post_resource.module

///**
// * Implements hook_entity_info().
// */
function post_resource_entity_info() {
    return array(
        'post' => array(
            'label' => t('Post'),
            'base table' => 'posts',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'PostController',
        ),
        'vote' => array(
            'label' => t('Vote'),
            'base table' => 'votes',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'VoteController',
        ),
    );
}

class VoteController extends EntityAPIController {

    protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
        $query = parent::buildQuery($ids, $conditions, $revision_id);
        return $query;
    }

    public function load($ids = array(), $conditions = array()) {
        $entities = parent::load($ids, $conditions);

        foreach($entities as &$entity) {
            $entity->user = user_load_small($entity->uid);
        }
        return $entities;
    }
}


class PostController extends EntityAPIController {

    public function load($ids = array(), $conditions = array()) {
        $entities = parent::load($ids, $conditions);

        foreach($entities as &$entity) {
            $entity->user = user_load_small($entity->uid);
            $entity->mentions = mention_load_from_content($entity->id, "post");
            if($entity->disorder_id > 0) {
                $entity->disorder = disorder_load($entity->disorder_id);

                $entity->votes_up = 0;
                $entity->votes_down = 0;

                // Count the votes
                $query = new EntityFieldQuery();
                $query->entityCondition('entity_type', 'vote');
                $query->propertyCondition('post_id', $entity->id);
                $result = $query->execute();
                if(isset($result['vote'])) {
                    $vote_ids = array_keys($result['vote']);
                    $votes = vote_load_multiple($vote_ids);

                    foreach($votes as $vote) {
                        if($vote->vote > 0) {
                            $entity->votes_up++;
                        } else {
                            $entity->votes_down++;
                        }

                    }
                }

            }
        }
        return $entities;

    }
    public function save($entity, DatabaseTransaction $transaction = NULL) {
        parent::save($entity, $transaction);

        // Scan the text for mentions
        mention_reindex($entity->id, "post", html_entity_decode(strip_tags($entity->text)));

        if($entity->disorder_id > 0) {
            $newVote = new stdClass();
            $newVote->post_id = $entity->id;
            $newVote->vote = 1;
            vote_save($newVote);
            $entity->votes_up = 1;
            $entity->disorder = disorder_load($entity->disorder_id);
        }


        // Create an activity for this new post
        $activity = new stdClass();
        $activity->uid = $entity->uid;
        $activity->created = time();
        $activity->modified = time();
        $activity->type = "post";
        $activity->object_id = $entity->id;
        $activity->share_id = $entity->share_id;
        activity_save($activity);

    }
}


//
//
//function comment_load($cid, $reset = FALSE) {
//    $comment = comment_load_multiple(array($cid), array(), $reset);
//    return $comment ? $comment[$cid] : FALSE;
//}
//
//function node_load($nid = NULL, $vid = NULL, $reset = FALSE) {
//    $nids = (isset($nid) ? array($nid) : array());
//    $conditions = (isset($vid) ? array('vid' => $vid) : array());
//    $node = node_load_multiple($nids, $conditions, $reset);
//    return $node ? reset($node) : FALSE;
//}
//



function post_load($id, $reset = FALSE) {
    $post = post_load_multiple(array($id), array(), $reset);
    return $post ? $post[$id] : FALSE;
}
function post_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    return entity_load('post', $ids, $conditions, $reset);
}
function post_save($entity) {
    entity_save('post', $entity);
}
function post_delete($id) {
    entity_delete('post', $id);
}

function vote_load($id, $reset = FALSE) {
    $vote = vote_load_multiple(array($id), $reset);
    return reset($vote);
}
function vote_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    return array_values(entity_load('vote', $ids, $conditions, $reset));
}
function vote_save($entity) {
    entity_save('vote', $entity);
}
function vote_delete($id) {
    entity_delete('vote', $id);
}

function post_resource_permission() {
    return array(
        'view posts' => array(
            'title' => t('View Posts'),
        ),
        'create posts' => array(
            'title' => t('Create Posts'),
        ),
        'delete posts' => array(
            'title' => t('Delete Posts')
        ),

        'view votes' => array(
            'title' => t('View Votes'),
        ),
        'create votes' => array(
            'title' => t('Create Votes'),
        ),
        'delete votes' => array(
            'title' => t('Delete Votes')
        )
    );
}

/**
 * Implementation of hook_services_resources().
 */
function post_resource_services_resources() {
    $resources = array();

    $resources['vote'] = array(
        'retrieve' => array(
            'help' => 'Retrieves a vote',
            'file' => array('type' => 'inc',
                'module' => 'post_resource',
                'name' => 'post_resource_vote'
            ),
            'callback' => '_post_resource_vote_retrieve',
            'access callback' => '_post_resource_vote_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the vote to get',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => 'Creates a vote',
            'file' => array('type' => 'inc',
                'module' => 'post_resource',
                'name' => 'post_resource_vote'
            ),
            'callback' => '_post_resource_vote_create',
            'access callback' => '_post_resource_vote_access',
            'access arguments' => array('create'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The vote object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'delete' => array(
            'help' => 'Deletes a post',
            'file' => array('type' => 'inc',
                'module' => 'post_resource',
                'name' => 'post_resource_vote'
            ),
            'callback' => '_post_resource_vote_delete',
            'access callback' => '_post_resource_vote_access',
            'access arguments' => array('delete'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the vote to delete',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'post_resource', 'name' => 'post_resource_vote'),
            'callback' => '_post_resource_vote_index',
            'access callback' => '_post_resource_vote_access',
            'access arguments' => array('index'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
        )
    );
    

    $resources['post_type'] = array(
        'index' => array(
            'help' => 'List all post types',
            'file' => array('type' => 'inc', 'module' => 'post_resource', 'name' => 'post_resource_type'),
            'callback' => '_post_resource_type_index',
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
            'access arguments' => array('access content'),
        ),
    );


    $resources['post'] = array(
        'retrieve' => array(
            'help' => 'Retrieves a post',
            'file' => array('file' => 'inc', 'module' => 'post_resource'),
            'callback' => '_post_resource_retrieve',
            'access callback' => '_post_resource_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the discussion to get',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => 'Creates a discussion',
            'file' => array('file' => 'inc', 'module' => 'post_resource'),
            'callback' => '_post_resource_create',
            'access callback' => '_post_resource_access',
            'access arguments' => array('create'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The discussion object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'delete' => array(
            'help' => 'Deletes a discussion',
            'file' => array('file' => 'inc', 'module' => 'post_resource'),
            'callback' => '_post_resource_delete',
            'access callback' => '_post_resource_access',
            'access arguments' => array('delete'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'nid',
                    'type' => 'int',
                    'description' => 'The id of the discussion to delete',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'post_resource', 'name' => 'post_resource'),
            'callback' => '_post_resource_index',
            'access callback' => '_post_resource_access',
            'access arguments' => array('index'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
        ),
    );

    return $resources;
}



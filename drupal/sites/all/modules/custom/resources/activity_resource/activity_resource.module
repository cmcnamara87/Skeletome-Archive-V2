<?php
// activity_resource.module

///**
// * Implements hook_entity_info().
// */
function activity_resource_entity_info() {
    return array(
        'activity' => array(
            'label' => t('Activity'),
            'base table' => 'activities',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'ActivityController',
        ),
        'reply' => array(
            'label' => t('Reply'),
            'base table' => 'replies',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'ReplyController',
        ),
    );
}

class ActivityController extends EntityAPIController {

    public function load($ids = array(), $conditions = array()) {
        $entities = parent::load($ids, $conditions);

        foreach($entities as &$entity) {
            // Load in the user details
            $entity->user = user_load_small($entity->uid);
            // Load in the linked object
            $entity->{$entity->type} = call_user_func($entity->type . "_load", $entity->object_id);

            // Load in the replies
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'reply');
            $query->propertyCondition('activity_id', $entity->id);
            $result = $query->execute();
            $ids = array_keys($result['reply']);
            $entity->replies = reply_load_multiple($ids);
        }
        return $entities;

    }
}

class ReplyController extends EntityAPIController {

    public function load($ids = array(), $conditions = array()) {
        $entities = parent::load($ids, $conditions);

        foreach($entities as &$entity) {
            // Load in the user details
            $entity->user = user_load_small($entity->uid);
        }
        return $entities;
    }

    public function save($entity, DatabaseTransaction $transaction = NULL) {
        parent::save($entity, $transaction);
        $entity->user = user_load_small($entity->uid);
    }

}


/*
class PatientController extends EntityAPIController {

    protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
        $query = parent::buildQuery($ids, $conditions, $revision_id);

        // Specify additional fields from the user and node tables.
        $query->innerJoin('users', 'u', 'base.uid = u.uid');
        $query->addField('u', 'name', 'ownerName');
        return $query;
    }

    private function addRelated(&$entity) {
        $entity->user = user_load_small($entity->uid);

        // Add in the diagnoses
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'diagnosis');
        $query->propertyCondition('patient_id', $entity->id);
        $result = $query->execute();
        $ids = array_keys($result['diagnosis']);
        $entity->diagnoses = diagnosis_load_multiple($ids);

        // Get the share count
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'share');
        $query->propertyCondition('patient_id', $entity->id);
        $result = $query->execute();
        $ids = array_keys($result['share']);
        $entity->shares = share_load_multiple($ids);
        foreach($entity->shares as &$share) {
            $share->group = group_load($share->group_id);
        }
    }

    public function save($entity, DatabaseTransaction $transaction = NULL) {
        parent::save($entity, $transaction);
        self::addRelated($entity);
    }

    public function load($ids = array(), $conditions = array()) {
        $entities = parent::load($ids, $conditions);
        foreach($entities as &$entity) {
            self::addRelated($entity);
        }
        return $entities;

    }

}
*/

function activity_load($id, $reset = FALSE) {
    return reset(activity_load_multiple(array($id), $reset));
}
function activity_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    $activities = array_values(entity_load('activity', $ids, $conditions, $reset));
    return $activities;
}
function activity_save($entity) {
    entity_save('activity', $entity);
}
function activity_delete($id) {
    entity_delete('activity', $id);
}

function reply_load($id, $reset = FALSE) {
    return reset(reply_load_multiple(array($id), $reset));
}
function reply_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    $reply = array_values(entity_load('reply', $ids, $conditions, $reset));
    return $reply;
}
function reply_save($entity) {
    entity_save('reply', $entity);
}
function reply_delete($id) {
    entity_delete('reply', $id);
}


/**
 * Implementation of hook_services_resources().
 */
function activity_resource_services_resources() {
    $resource = array();

    $resource['activity'] = array(
        'index' => array(
            'help' => 'List all activities',
            'file' => array('type' => 'inc', 'module' => 'activity_resource', 'name' => 'activity_resource'),
            'callback' => '_activity_resource_index',
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
            'access arguments' => array('access content'),
        ),
    );

    $resource['reply'] = array(
        'retrieve' => array(
            'help' => 'Retrieves a activity reply',
            'file' => array('type' => 'inc', 'module' => 'activity_resource', 'name' => 'activity_resource_reply'),
            'callback' => '_activity_resource_reply_retrieve',
            'access callback' => '_activity_resource_reply_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the patient reply to get',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => 'Creates a reply',
            'file' => array('type' => 'inc', 'module' => 'activity_resource', 'name' => 'activity_resource_reply'),
            'callback' => '_activity_resource_reply_create',
            'access arguments' => array('patient resource create'),
            'access arguments append' => FALSE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient reply object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'update' => array(
            'help' => 'Updates a reply',
            'file' => array('type' => 'inc', 'module' => 'activity_resource', 'name' => 'activity_resource_reply'),
            'callback' => '_activity_resource_reply_update',
            'access callback' => '_activity_resource_reply_access',
            'access arguments' => array('update'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the node to update',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient reply data object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'delete' => array(
            'help' => 'Deletes a reply',
            'file' => array('type' => 'inc', 'module' => 'activity_resource', 'name' => 'activity_resource_reply'),
            'callback' => '_activity_resource_reply_delete',
            'access callback' => '_activity_resource_reply_access',
            'access arguments' => array('delete'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'nid',
                    'type' => 'int',
                    'description' => 'The id of the patient to delete',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'activity_resource', 'name' => 'activity_resource_reply'),
            'callback' => '_activity_resource_reply_index',
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
            'access arguments' => array('access content'),
        ),
    );

    return $resource;
}



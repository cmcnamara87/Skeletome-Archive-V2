<?php
// patientresource.module

///**
// * Implements hook_entity_info().
// */
function patientresource_entity_info() {
    return array(
        'patient' => array(
            'label' => t('Patient'),
            'base table' => 'patients',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'PatientController',
        ),
        'identifier' => array(
            'label' => t('Patient IDs'),
            'base table' => 'identifiers',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'EntityAPIController',
        ),
        'address' => array(
            'label' => t('Address'),
            'base table' => 'addresses',
            'entity keys' => array(
                'id' => 'id',
            ),
            'entity class'           => 'Entity',
            'controller class'       => 'EntityAPIController',
        ),
    );
}


class PatientController extends EntityAPIController {

    protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
        $query = parent::buildQuery($ids, $conditions, $revision_id);
        return $query;
    }

    private function addRelated(&$entity) {
        $entity->user = user_load_small($entity->uid);

        $entity->mentions = mention_load_from_content($entity->id, "patient");
    }

    public function save($entity, DatabaseTransaction $transaction = NULL) {

        if(isset($entity->id)) {
            $old_patient = patient_load($entity->id);
        } else {
            $old_patient = null;
        }

        parent::save($entity, $transaction);

//         Check if the clinical summary has changed, so we can do some term processing
        if(!$old_patient) {
            // No old patient, so new summary
            $clinical_summary_changed = true;
        } else if($entity->clinical_summary != $old_patient->clinical_summary) {
            // The summary has changed
            $clinical_summary_changed = true;
        } else {
            // The summary hasnt changed
            $clinical_summary_changed = false;
        };

        // Analyse the clinical summary for terms
        if($clinical_summary_changed) {
            $clinical_summary = str_replace("&nbsp;", " ", strip_tags($entity->clinical_summary));
            mention_reindex($entity->id, "patient", $clinical_summary);
        }

        self::addRelated($entity);
    }

    public function load($ids = array(), $conditions = array()) {
        global $user;

        $entities = parent::load($ids, $conditions);

        foreach($entities as &$entity) {
            // check if the are the owner of this patient
            if($entity->uid != $user->uid) {
                $entity->not_owner = "true";
                // not the owner, remove private details
                unset(
                    $entity->first_name,
                    $entity->last_name,
                    $entity->alias,
                    $entity->dob,
                    $entity->gender,
                    $entity->ethnicity
                );

                if(!patients_is_accessible($entity->id)) {
                    $entity->access = "none";
                    unset($entity->clinical_summary);
                } else {
                    $entity->access = "group";
                }
                $entity->name = "#" . $entity->id;
            } else {
                $entity->access = "owner";

                $entity->name = "";

                if(!(strlen($entity->first_name) || strlen($entity->last_name) || strlen($entity->alias))) {
                    // No names given, use ID
                    $entity->name = "#" . $entity->id;
                } else {
                    // Has some info, use that
                    $entity->name .= "#" . $entity->id . " - ";

                    if(strlen($entity->first_name) || strlen($entity->last_name)) {
                        $entity->name .= $entity->first_name . ' ' . $entity->last_name;
                    }

                    if(strlen($entity->alias)) {
                        if(strlen($entity->name)) {
                            $entity->name .= " / ";
                        }
                        $entity->name .= $entity->alias;
                    }
                }




            }
            self::addRelated($entity);
        }

        return $entities;
    }

}


function patient_load($id, $reset = FALSE) {
    $patient =  patient_load_multiple(array($id), $reset);
    return reset($patient);
}
function patient_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    $patients = array_values(entity_load('patient', $ids, $conditions, $reset));
    return $patients;
}
function patient_save($entity) {
    entity_save('patient', $entity);
}
function patient_delete($id) {
    entity_delete('patient', $id);
}

function identifier_load($id, $reset = FALSE) {
    return reset(identifier_load_multiple(array($id), $reset));
}
function identifier_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    $identifier = array_values(entity_load('identifier', $ids, $conditions, $reset));
    return $identifier;
}
function identifier_save($entity) {
    entity_save('identifier', $entity);
}
function identifier_delete($id) {
    entity_delete('identifier', $id);
}

function address_load($id, $reset = FALSE) {
    return reset(address_load_multiple(array($id), $reset));
}
function address_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
    $address = array_values(entity_load('address', $ids, $conditions, $reset));
    return $address;
}
function address_save($entity) {
    entity_save('address', $entity);
}
function address_delete($id) {
    entity_delete('address', $id);
}


function patientresource_permission() {
    return array(
        'view patients' => array(
            'title' => t('Access Patients'),
        ),
        'create patients' => array(
            'title' => t('Create Patients'),
        ),
        'update patients' => array(
            'title' => t('Edit Patients'),
        ),
        'delete patients' => array(
            'title' => t('Delete Patients')
        )
    );
}

/**
 * Implementation of hook_services_resources().
 */
function patientresource_services_resources() {
    $resource = array();

    $resource['addresslookup'] = array(
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_addresslookup'),
            'callback' => '_patientresource_addresslookup_index',
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
            'access arguments' => array('access content'),
        ),
    );

    $resource['address'] = array(
        'retrieve' => array(
            'help' => 'Retrieves a patient address',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_address'),
            'callback' => '_patientresource_address_retrieve',
            'access callback' => '_patientresource_address_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the patient address to get',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => 'Creates a address',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_address'),
            'callback' => '_patientresource_address_create',
            'access callback' => '_patientresource_address_access',
            'access arguments' => array('create'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient address object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'update' => array(
            'help' => 'Updates a address',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_address'),
            'callback' => '_patientresource_address_update',
            'access callback' => '_patientresource_address_access',
            'access arguments' => array('update'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the node to update',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient address data object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'delete' => array(
            'help' => 'Deletes a address',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_address'),
            'callback' => '_patientresource_address_delete',
            'access callback' => '_patientresource_address_access',
            'access arguments' => array('delete'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'nid',
                    'type' => 'int',
                    'description' => 'The id of the patient to delete',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_address'),
            'callback' => '_patientresource_address_index',
            'access callback' => '_patientresource_address_access',
            'access arguments' => array('index'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
        ),
    );


    $resource['identifier'] = array(
        'retrieve' => array(
            'help' => 'Retrieves a patient identifier',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_identifier'),
            'callback' => '_patientresource_identifier_retrieve',
            'access callback' => '_patientresource_identifier_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the patient identifier to get',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => 'Creates a patient',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_identifier'),
            'callback' => '_patientresource_identifier_create',
            'access callback' => '_patientresource_identifier_access',
            'access arguments' => array('create'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient identifier object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'update' => array(
            'help' => 'Updates a patient',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_identifier'),
            'callback' => '_patientresource_identifier_update',
            'access callback' => '_patientresource_identifier_access',
            'access arguments' => array('update'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the node to update',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient identifier data object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'delete' => array(
            'help' => 'Deletes a patient',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_identifier'),
            'callback' => '_patientresource_identifier_delete',
            'access callback' => '_patientresource_identifier_access',
            'access arguments' => array('delete'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'nid',
                    'type' => 'int',
                    'description' => 'The id of the patient to delete',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource_identifier'),
            'callback' => '_patientresource_identifier_index',
            'access callback' => '_patientresource_identifier_access',
            'access arguments' => array('index'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 20),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
        ),
    );


    $resource['patient'] = array(
        'retrieve' => array(
            'help' => 'Retrieves a patient',
            'file' => array('file' => 'inc', 'module' => 'patientresource'),
            'callback' => '_patientresource_retrieve',
            'access callback' => '_patientresource_access',
            'access arguments' => array('view'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the patient to get',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'create' => array(
            'help' => 'Creates a patient',
            'file' => array('file' => 'inc', 'module' => 'patientresource'),
            'callback' => '_patientresource_create',
            'access callback' => '_patientresource_access',
            'access arguments' => array('create'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'update' => array(
            'help' => 'Updates a patient',
            'file' => array('file' => 'inc', 'module' => 'patientresource'),
            'callback' => '_patientresource_update',
            'access callback' => '_patientresource_access',
            'access arguments' => array('update'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'id',
                    'type' => 'int',
                    'description' => 'The id of the node to update',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
                array(
                    'name' => 'data',
                    'type' => 'struct',
                    'description' => 'The patient data object',
                    'source' => 'data',
                    'optional' => FALSE,
                ),
            ),
        ),
        'delete' => array(
            'help' => 'Deletes a patient',
            'file' => array('file' => 'inc', 'module' => 'patientresource'),
            'callback' => '_patientresource_delete',
            'access callback' => '_patientresource_access',
            'access arguments' => array('delete'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'nid',
                    'type' => 'int',
                    'description' => 'The id of the patient to delete',
                    'source' => array('path' => '0'),
                    'optional' => FALSE,
                ),
            ),
        ),
        'index' => array(
            'help' => 'List all nodes',
            'file' => array('type' => 'inc', 'module' => 'patientresource', 'name' => 'patientresource'),
            'callback' => '_patientresource_index',
            'access callback' => '_patientresource_access',
            'access arguments' => array('index'),
            'access arguments append' => TRUE,
            'args' => array(
                array(
                    'name' => 'query',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'Looking for a patient',
                    'default value' => "",
                    'source' => array('param' => 'query'),
                ),
                array(
                    'name' => 'group_id',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The group to get the patients for',
                    'default value' => 0,
                    'source' => array('param' => 'group_id'),
                ),
                array(
                    'name' => 'embed',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => '1 if we should embed diagnoses and shares',
                    'default value' => 0,
                    'source' => array('param' => 'embed'),
                ),
                array(
                    'name' => 'page',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'The zero-based index of the page to get, defaults to 0.',
                    'default value' => 0,
                    'source' => array('param' => 'page'),
                ),
                array(
                    'name' => 'fields',
                    'optional' => TRUE,
                    'type' => 'string',
                    'description' => 'The fields to get.',
                    'default value' => '*',
                    'source' => array('param' => 'fields'),
                ),
                array(
                    'name' => 'parameters',
                    'optional' => TRUE,
                    'type' => 'array',
                    'description' => 'Parameters array',
                    'default value' => array(),
                    'source' => array('param' => 'parameters'),
                ),
                array(
                    'name' => 'pagesize',
                    'optional' => TRUE,
                    'type' => 'int',
                    'description' => 'Number of records to get per page.',
                    'default value' => variable_get('services_node_index_page_size', 10),
                    'source' => array('param' => 'pagesize'),
                ),
            ),
        ),
    );

    return $resource;
}


